(function(q){if(typeof exports=="object"&&typeof module<"u")module.exports=q();else if(typeof define=="function"&&define.amd)define([],q);else{var F;typeof window<"u"?F=window:typeof global<"u"?F=global:typeof self<"u"?F=self:F=this,F.turf=q()}})(function(){var q,F,z;return function(){function w(E,t,m){function P(o,a){if(!t[o]){if(!E[o]){var y=typeof require=="function"&&require;if(!a&&y)return y(o,!0);if(g)return g(o,!0);var h=new Error("Cannot find module '"+o+"'");throw h.code="MODULE_NOT_FOUND",h}var d=t[o]={exports:{}};E[o][0].call(d.exports,function(i){var l=E[o][1][i];return P(l||i)},d,d.exports,w,E,t,m)}return t[o].exports}for(var g=typeof require=="function"&&require,b=0;b<m.length;b++)P(m[b]);return P}return w}()({1:[function(w,E,t){E.exports={helpers:w("@turf/helpers"),booleanPointInPolygon:w("@turf/boolean-point-in-polygon").default}},{"@turf/boolean-point-in-polygon":2,"@turf/helpers":3}],2:[function(w,E,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var m=w("@turf/invariant");function P(o,a,y){if(y===void 0&&(y={}),!o)throw new Error("point is required");if(!a)throw new Error("polygon is required");var h=m.getCoord(o),d=m.getGeom(a),i=d.type,l=a.bbox,f=d.coordinates;if(l&&b(h,l)===!1)return!1;i==="Polygon"&&(f=[f]);for(var v=!1,s=0;s<f.length&&!v;s++)if(g(h,f[s][0],y.ignoreBoundary)){for(var c=!1,A=1;A<f[s].length&&!c;)g(h,f[s][A],!y.ignoreBoundary)&&(c=!0),A++;c||(v=!0)}return v}t.default=P;function g(o,a,y){var h=!1;a[0][0]===a[a.length-1][0]&&a[0][1]===a[a.length-1][1]&&(a=a.slice(0,a.length-1));for(var d=0,i=a.length-1;d<a.length;i=d++){var l=a[d][0],f=a[d][1],v=a[i][0],s=a[i][1],c=o[1]*(l-v)+f*(v-o[0])+s*(o[0]-l)===0&&(l-o[0])*(v-o[0])<=0&&(f-o[1])*(s-o[1])<=0;if(c)return!y;var A=f>o[1]!=s>o[1]&&o[0]<(v-l)*(o[1]-f)/(s-f)+l;A&&(h=!h)}return h}function b(o,a){return a[0]<=o[0]&&a[1]<=o[1]&&a[2]>=o[0]&&a[3]>=o[1]}},{"@turf/invariant":4}],3:[function(w,E,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.earthRadius=63710088e-1,t.factors={centimeters:t.earthRadius*100,centimetres:t.earthRadius*100,degrees:t.earthRadius/111325,feet:t.earthRadius*3.28084,inches:t.earthRadius*39.37,kilometers:t.earthRadius/1e3,kilometres:t.earthRadius/1e3,meters:t.earthRadius,metres:t.earthRadius,miles:t.earthRadius/1609.344,millimeters:t.earthRadius*1e3,millimetres:t.earthRadius*1e3,nauticalmiles:t.earthRadius/1852,radians:1,yards:t.earthRadius*1.0936},t.unitsFactors={centimeters:100,centimetres:100,degrees:1/111325,feet:3.28084,inches:39.37,kilometers:1/1e3,kilometres:1/1e3,meters:1,metres:1,miles:1/1609.344,millimeters:1e3,millimetres:1e3,nauticalmiles:1/1852,radians:1/t.earthRadius,yards:1.0936133},t.areaFactors={acres:247105e-9,centimeters:1e4,centimetres:1e4,feet:10.763910417,hectares:1e-4,inches:1550.003100006,kilometers:1e-6,kilometres:1e-6,meters:1,metres:1,miles:386e-9,millimeters:1e6,millimetres:1e6,yards:1.195990046};function m(n,r,e){e===void 0&&(e={});var u={type:"Feature"};return(e.id===0||e.id)&&(u.id=e.id),e.bbox&&(u.bbox=e.bbox),u.properties=r||{},u.geometry=n,u}t.feature=m;function P(n,r,e){switch(e===void 0&&(e={}),n){case"Point":return g(r).geometry;case"LineString":return y(r).geometry;case"Polygon":return o(r).geometry;case"MultiPoint":return l(r).geometry;case"MultiLineString":return i(r).geometry;case"MultiPolygon":return f(r).geometry;default:throw new Error(n+" is invalid")}}t.geometry=P;function g(n,r,e){if(e===void 0&&(e={}),!n)throw new Error("coordinates is required");if(!Array.isArray(n))throw new Error("coordinates must be an Array");if(n.length<2)throw new Error("coordinates must be at least 2 numbers long");if(!T(n[0])||!T(n[1]))throw new Error("coordinates must contain numbers");var u={type:"Point",coordinates:n};return m(u,r,e)}t.point=g;function b(n,r,e){return e===void 0&&(e={}),d(n.map(function(u){return g(u,r)}),e)}t.points=b;function o(n,r,e){e===void 0&&(e={});for(var u=0,O=n;u<O.length;u++){var R=O[u];if(R.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var C=0;C<R[R.length-1].length;C++)if(R[R.length-1][C]!==R[0][C])throw new Error("First and last Position are not equivalent.")}var _={type:"Polygon",coordinates:n};return m(_,r,e)}t.polygon=o;function a(n,r,e){return e===void 0&&(e={}),d(n.map(function(u){return o(u,r)}),e)}t.polygons=a;function y(n,r,e){if(e===void 0&&(e={}),n.length<2)throw new Error("coordinates must be an array of two or more positions");var u={type:"LineString",coordinates:n};return m(u,r,e)}t.lineString=y;function h(n,r,e){return e===void 0&&(e={}),d(n.map(function(u){return y(u,r)}),e)}t.lineStrings=h;function d(n,r){r===void 0&&(r={});var e={type:"FeatureCollection"};return r.id&&(e.id=r.id),r.bbox&&(e.bbox=r.bbox),e.features=n,e}t.featureCollection=d;function i(n,r,e){e===void 0&&(e={});var u={type:"MultiLineString",coordinates:n};return m(u,r,e)}t.multiLineString=i;function l(n,r,e){e===void 0&&(e={});var u={type:"MultiPoint",coordinates:n};return m(u,r,e)}t.multiPoint=l;function f(n,r,e){e===void 0&&(e={});var u={type:"MultiPolygon",coordinates:n};return m(u,r,e)}t.multiPolygon=f;function v(n,r,e){e===void 0&&(e={});var u={type:"GeometryCollection",geometries:n};return m(u,r,e)}t.geometryCollection=v;function s(n,r){if(r===void 0&&(r=0),r&&!(r>=0))throw new Error("precision must be a positive number");var e=Math.pow(10,r||0);return Math.round(n*e)/e}t.round=s;function c(n,r){r===void 0&&(r="kilometers");var e=t.factors[r];if(!e)throw new Error(r+" units is invalid");return n*e}t.radiansToLength=c;function A(n,r){r===void 0&&(r="kilometers");var e=t.factors[r];if(!e)throw new Error(r+" units is invalid");return n/e}t.lengthToRadians=A;function I(n,r){return M(A(n,r))}t.lengthToDegrees=I;function N(n){var r=n%360;return r<0&&(r+=360),r}t.bearingToAzimuth=N;function M(n){var r=n%(2*Math.PI);return r*180/Math.PI}t.radiansToDegrees=M;function L(n){var r=n%360;return r*Math.PI/180}t.degreesToRadians=L;function S(n,r,e){if(r===void 0&&(r="kilometers"),e===void 0&&(e="kilometers"),!(n>=0))throw new Error("length must be a positive number");return c(A(n,r),e)}t.convertLength=S;function k(n,r,e){if(r===void 0&&(r="meters"),e===void 0&&(e="kilometers"),!(n>=0))throw new Error("area must be a positive number");var u=t.areaFactors[r];if(!u)throw new Error("invalid original units");var O=t.areaFactors[e];if(!O)throw new Error("invalid final units");return n/u*O}t.convertArea=k;function T(n){return!isNaN(n)&&n!==null&&!Array.isArray(n)}t.isNumber=T;function G(n){return!!n&&n.constructor===Object}t.isObject=G;function B(n){if(!n)throw new Error("bbox is required");if(!Array.isArray(n))throw new Error("bbox must be an Array");if(n.length!==4&&n.length!==6)throw new Error("bbox must be an Array of 4 or 6 numbers");n.forEach(function(r){if(!T(r))throw new Error("bbox must only contain numbers")})}t.validateBBox=B;function D(n){if(!n)throw new Error("id is required");if(["string","number"].indexOf(typeof n)===-1)throw new Error("id must be a number or a string")}t.validateId=D},{}],4:[function(w,E,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var m=w("@turf/helpers");function P(i){if(!i)throw new Error("coord is required");if(!Array.isArray(i)){if(i.type==="Feature"&&i.geometry!==null&&i.geometry.type==="Point")return i.geometry.coordinates;if(i.type==="Point")return i.coordinates}if(Array.isArray(i)&&i.length>=2&&!Array.isArray(i[0])&&!Array.isArray(i[1]))return i;throw new Error("coord must be GeoJSON Point or an Array of numbers")}t.getCoord=P;function g(i){if(Array.isArray(i))return i;if(i.type==="Feature"){if(i.geometry!==null)return i.geometry.coordinates}else if(i.coordinates)return i.coordinates;throw new Error("coords must be GeoJSON Feature, Geometry Object or an Array")}t.getCoords=g;function b(i){if(i.length>1&&m.isNumber(i[0])&&m.isNumber(i[1]))return!0;if(Array.isArray(i[0])&&i[0].length)return b(i[0]);throw new Error("coordinates must only contain numbers")}t.containsNumber=b;function o(i,l,f){if(!l||!f)throw new Error("type and name required");if(!i||i.type!==l)throw new Error("Invalid input to "+f+": must be a "+l+", given "+i.type)}t.geojsonType=o;function a(i,l,f){if(!i)throw new Error("No feature passed");if(!f)throw new Error(".featureOf() requires a name");if(!i||i.type!=="Feature"||!i.geometry)throw new Error("Invalid input to "+f+", Feature with geometry required");if(!i.geometry||i.geometry.type!==l)throw new Error("Invalid input to "+f+": must be a "+l+", given "+i.geometry.type)}t.featureOf=a;function y(i,l,f){if(!i)throw new Error("No featureCollection passed");if(!f)throw new Error(".collectionOf() requires a name");if(!i||i.type!=="FeatureCollection")throw new Error("Invalid input to "+f+", FeatureCollection required");for(var v=0,s=i.features;v<s.length;v++){var c=s[v];if(!c||c.type!=="Feature"||!c.geometry)throw new Error("Invalid input to "+f+", Feature with geometry required");if(!c.geometry||c.geometry.type!==l)throw new Error("Invalid input to "+f+": must be a "+l+", given "+c.geometry.type)}}t.collectionOf=y;function h(i){return i.type==="Feature"?i.geometry:i}t.getGeom=h;function d(i,l){return i.type==="FeatureCollection"?"FeatureCollection":i.type==="GeometryCollection"?"GeometryCollection":i.type==="Feature"&&i.geometry!==null?i.geometry.type:i.type}t.getType=d},{"@turf/helpers":3}]},{},[1])(1)});
